#include <bits/stdc++.h> 
class node{
    public:
    int data;
    int row, col;

    node(int d, int i,int j){
        data = d;
        row = i;
        col = j;
    }
};
class comp{
    public:
        bool operator()(node* a, node* b){
            return a->data > b->data;
        }
};
vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    // Write your code here. 
    priority_queue<node*, vector<node*> , comp>minHeap;
    vector<int>ans;
    for(int i=0;i<k;i++){
        node* temp = new node(kArrays[i][0], i, 0);
        minHeap.push(temp);
    }
    while(!minHeap.empty()){
        node* temp = minHeap.top();
        minHeap.pop();
        ans.push_back(temp->data);
        int row = temp->row;
        int col = temp->col;
        if(col+1 < kArrays[row].size()){
              node* newNode = new node(kArrays[row][col+1], row, col+1);
              minHeap.push(newNode);
        }
    }
    return ans;
}
